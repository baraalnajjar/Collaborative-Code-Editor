{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CollaborativeRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport '../../CSS/CollaborativeRoom.css'; // Import your CSS file for styling\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collaborative = () => {\n  _s();\n  const location = useLocation();\n  const {\n    project\n  } = location.state || {}; // Access the passed project from state\n  const [id, setId] = useState(null); // State for room ID\n  const [password, setPassword] = useState(null); // State for password\n  const [comments, setComments] = useState([]); // State for comments\n  const [loading, setLoading] = useState(true); // Set loading state to true on component mount\n  const [newComment, setNewComment] = useState(''); // State for the new comment input\n  const username = localStorage.getItem('username'); // Retrieve the username from local storage\n\n  useEffect(() => {\n    const createRoom = async () => {\n      const token = localStorage.getItem('auth_token'); // Fetch the auth token\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token); // Set the authorization header\n\n      try {\n        console.log(\"Creating room...\"); // Log before the request\n        const response = await request('post', '/room/create'); // Send POST request\n        console.log(\"Response received:\", response);\n\n        // Check if the response contains the expected data\n        if (response && response.data) {\n          const {\n            password,\n            roomId\n          } = response.data; // Destructure password and roomId\n          console.log(`Room created with ID: ${roomId}, Password: ${password}`);\n\n          // Set these values in the component state\n          setId(roomId); // Update room ID state\n          setPassword(password); // Update password state\n        } else {\n          console.error('Unexpected response format:', response);\n          setId(null); // Resetting the state in case of unexpected response\n          setPassword(null);\n        }\n      } catch (error) {\n        console.error('Error creating room:', error);\n        setId(null); // Resetting the state in case of error\n        setPassword(null);\n      } finally {\n        setLoading(false); // Reset loading state\n      }\n    };\n\n    const fetchComments = async () => {\n      const token = localStorage.getItem('auth_token'); // Fetch the auth token\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token); // Set the authorization header\n\n      try {\n        console.log(\"Fetching project ID...\"); // Log before the request\n        const projectResponse = await request('GET', '/project/getId', {\n          project_name: project\n        }); // Fetch project ID\n        console.log(\"Project ID response:\", projectResponse);\n        const projectId = projectResponse.data.id; // Get the project ID\n\n        console.log(\"Fetching comments...\"); // Log before the request\n        const commentsResponse = await request('GET', '/comment/read', {\n          project_id: projectId\n        }); // Fetch comments\n        console.log(\"Comments response:\", commentsResponse);\n\n        // Check if the response contains comments\n        if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\n          setComments(commentsResponse.data.comments); // Update comments state\n        } else {\n          console.error('No comments found:', commentsResponse);\n          setComments([]); // Resetting the state in case of no comments\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setComments([]); // Resetting the state in case of error\n      }\n    };\n\n    createRoom(); // Call the function to create a room on component mount\n    fetchComments(); // Call the function to fetch comments on component mount\n  }, [project]); // Empty dependency array to run only once on mount\n\n  const handleAddComment = async () => {\n    const token = localStorage.getItem('auth_token'); // Fetch the auth token\n    if (!token) {\n      alert('Session expired. Please log in again.');\n      return;\n    }\n    setAuthHeader(token); // Set the authorization header\n\n    try {\n      // Get User ID\n      const userIdResponse = await request('GET', '/editor/getId', {\n        editorName: username\n      });\n      const userId = userIdResponse.data; // Assuming the response is a simple ID\n\n      // Get Project ID\n      const projectResponse = await request('GET', '/project/getId', {\n        project_name: project\n      });\n      const projectId = projectResponse.data.id; // Fetch project ID from the response\n\n      // Prepare the comment request body\n      const commentBody = {\n        comment: newComment,\n        project_id: projectId // Use the project ID here\n      };\n\n      // Post the comment with userID in the query parameter\n\n      // eslint-disable-next-line no-unused-vars\n      const postCommentResponse = await request('POST', `/comment/post?userID=${userId}`, commentBody);\n\n      // Optionally, update the comments state\n      setComments(prevComments => [...prevComments, {\n        name: username,\n        comment: newComment,\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString()\n      }]);\n\n      // Clear the comment input\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      alert('Failed to add comment. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collaborative-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-name-box\",\n      children: project ? `Collaborate on project: ${project}` : 'No Project'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"id-box\",\n      children: [loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), loading ? '' : password ? `Password: ${password}` : 'No Password']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 33\n          }, this), \": \", comment.comment, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [comment.date, \" \", comment.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add your comment here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n_s(Collaborative, \"8qeFFbn5LBIDvJSDMlDAAyxjZRw=\", false, function () {\n  return [useLocation];\n});\n_c = Collaborative;\nexport default Collaborative;\nvar _c;\n$RefreshReg$(_c, \"Collaborative\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","request","setAuthHeader","Collaborative","location","project","state","id","setId","password","setPassword","comments","setComments","loading","setLoading","newComment","setNewComment","username","localStorage","getItem","createRoom","token","alert","console","log","response","data","roomId","error","fetchComments","projectResponse","project_name","projectId","commentsResponse","project_id","handleAddComment","userIdResponse","editorName","userId","commentBody","comment","postCommentResponse","prevComments","name","date","Date","toLocaleDateString","time","toLocaleTimeString","length","map","index","e","target","value"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CollaborativeRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../../CSS/CollaborativeRoom.css'; // Import your CSS file for styling\r\nimport { request, setAuthHeader } from '../../helpers/axios_helper'; \r\n\r\nconst Collaborative = () => {\r\n    const location = useLocation();\r\n    const { project } = location.state || {}; // Access the passed project from state\r\n    const [id, setId] = useState(null); // State for room ID\r\n    const [password, setPassword] = useState(null); // State for password\r\n    const [comments, setComments] = useState([]); // State for comments\r\n    const [loading, setLoading] = useState(true); // Set loading state to true on component mount\r\n    const [newComment, setNewComment] = useState(''); // State for the new comment input\r\n    const username = localStorage.getItem('username'); // Retrieve the username from local storage\r\n\r\n    useEffect(() => {\r\n        const createRoom = async () => {\r\n            const token = localStorage.getItem('auth_token'); // Fetch the auth token\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token); // Set the authorization header\r\n\r\n            try {\r\n                console.log(\"Creating room...\"); // Log before the request\r\n                const response = await request('post', '/room/create'); // Send POST request\r\n                console.log(\"Response received:\", response);\r\n\r\n                // Check if the response contains the expected data\r\n                if (response && response.data) {\r\n                    const { password, roomId } = response.data; // Destructure password and roomId\r\n                    console.log(`Room created with ID: ${roomId}, Password: ${password}`);\r\n\r\n                    // Set these values in the component state\r\n                    setId(roomId); // Update room ID state\r\n                    setPassword(password); // Update password state\r\n                } else {\r\n                    console.error('Unexpected response format:', response);\r\n                    setId(null); // Resetting the state in case of unexpected response\r\n                    setPassword(null);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating room:', error);\r\n                setId(null); // Resetting the state in case of error\r\n                setPassword(null);\r\n            } finally {\r\n                setLoading(false); // Reset loading state\r\n            }\r\n        };\r\n\r\n        const fetchComments = async () => {\r\n            const token = localStorage.getItem('auth_token'); // Fetch the auth token\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n        \r\n            setAuthHeader(token); // Set the authorization header\r\n        \r\n            try {\r\n                console.log(\"Fetching project ID...\"); // Log before the request\r\n                const projectResponse = await request('GET', '/project/getId', { project_name: project }); // Fetch project ID\r\n                console.log(\"Project ID response:\", projectResponse);\r\n        \r\n                const projectId = projectResponse.data.id; // Get the project ID\r\n        \r\n                console.log(\"Fetching comments...\"); // Log before the request\r\n                const commentsResponse = await request('GET', '/comment/read', { project_id: projectId }); // Fetch comments\r\n                console.log(\"Comments response:\", commentsResponse);\r\n        \r\n                // Check if the response contains comments\r\n                if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\r\n                    setComments(commentsResponse.data.comments); // Update comments state\r\n                } else {\r\n                    console.error('No comments found:', commentsResponse);\r\n                    setComments([]); // Resetting the state in case of no comments\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                setComments([]); // Resetting the state in case of error\r\n            }\r\n        };\r\n\r\n        createRoom(); // Call the function to create a room on component mount\r\n        fetchComments(); // Call the function to fetch comments on component mount\r\n    }, [project]); // Empty dependency array to run only once on mount\r\n\r\n    const handleAddComment = async () => {\r\n        const token = localStorage.getItem('auth_token'); // Fetch the auth token\r\n        if (!token) {\r\n            alert('Session expired. Please log in again.');\r\n            return;\r\n        }\r\n    \r\n        setAuthHeader(token); // Set the authorization header\r\n    \r\n        try {\r\n            // Get User ID\r\n            const userIdResponse = await request('GET', '/editor/getId', { editorName: username });\r\n            const userId = userIdResponse.data; // Assuming the response is a simple ID\r\n    \r\n            // Get Project ID\r\n            const projectResponse = await request('GET', '/project/getId', { project_name: project });\r\n            const projectId = projectResponse.data.id; // Fetch project ID from the response\r\n    \r\n            // Prepare the comment request body\r\n            const commentBody = {\r\n                comment: newComment,\r\n                project_id: projectId // Use the project ID here\r\n            };\r\n    \r\n            // Post the comment with userID in the query parameter\r\n            \r\n            // eslint-disable-next-line no-unused-vars\r\n            const postCommentResponse = await request('POST', `/comment/post?userID=${userId}`, commentBody);\r\n\r\n            // Optionally, update the comments state\r\n            setComments((prevComments) => [\r\n                ...prevComments,\r\n                { name: username, comment: newComment, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n            ]);\r\n    \r\n            // Clear the comment input\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error);\r\n            alert('Failed to add comment. Please try again.');\r\n        }\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"collaborative-container\">\r\n            <div className=\"project-name-box\">\r\n                {project ? `Collaborate on project: ${project}` : 'No Project'}\r\n            </div>\r\n            <div className=\"id-box\">\r\n                {loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID'}\r\n                <br />\r\n                {loading ? '' : password ? `Password: ${password}` : 'No Password'}\r\n            </div>\r\n            <div className=\"comments-section\">\r\n                <h3>Comments</h3>\r\n                {comments.length > 0 ? (\r\n                    <ul>\r\n                        {comments.map((comment, index) => (\r\n                            <li key={index}>\r\n                                <strong>{comment.name}</strong>: {comment.comment} <br />\r\n                                <small>{comment.date} {comment.time}</small>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No comments found.</p>\r\n                )}\r\n            </div>\r\n            <div className=\"add-comment-section\">\r\n                <textarea \r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder=\"Add your comment here...\"\r\n                />\r\n                <button onClick={handleAddComment}>Add Comment</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Collaborative;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}