{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CollaborativeRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport '../../CSS/CollaborativeRoom.css';\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collaborative = () => {\n  _s();\n  const location = useLocation();\n  const {\n    project\n  } = location.state || {};\n  const [id, setId] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newComment, setNewComment] = useState('');\n  const [newChatMessage, setNewChatMessage] = useState(''); // State for new chat message\n  const [chatMessages, setChatMessages] = useState([]); // State for chat messages\n  const [users, setUsers] = useState([]); // State for users\n  const username = localStorage.getItem('username');\n  const [stompClient, setStompClient] = useState(null); // State to hold the Stomp client\n\n  useEffect(() => {\n    const createRoom = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        console.log(\"Creating room...\");\n        const response = await request('post', '/room/create');\n        console.log(\"Response received:\", response);\n        if (response && response.data) {\n          const {\n            password,\n            roomId\n          } = response.data;\n          console.log(`Room created with ID: ${roomId}, Password: ${password}`);\n          setId(roomId);\n          setPassword(password);\n        } else {\n          console.error('Unexpected response format:', response);\n          setId(null);\n          setPassword(null);\n        }\n      } catch (error) {\n        console.error('Error creating room:', error);\n        setId(null);\n        setPassword(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchComments = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        console.log(\"Fetching project ID...\");\n        const projectResponse = await request('GET', '/project/getId', {\n          project_name: project\n        });\n        console.log(\"Project ID response:\", projectResponse);\n        const projectId = projectResponse.data.id;\n        console.log(\"Fetching comments...\");\n        const commentsResponse = await request('GET', '/comment/read', {\n          project_id: projectId\n        });\n        console.log(\"Comments response:\", commentsResponse);\n        if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\n          setComments(commentsResponse.data.comments);\n        } else {\n          console.error('No comments found:', commentsResponse);\n          setComments([]);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setComments([]);\n      }\n    };\n    createRoom();\n    fetchComments();\n  }, [project]);\n\n  // WebSocket connection and subscription\n  useEffect(() => {\n    if (id) {\n      const socket = new SockJS('http://localhost:8082/app');\n      const stomp = Stomp.over(socket);\n      stomp.connect({}, () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the chat room topic for receiving messages\n        stomp.subscribe(`/topic/room/${id}`, message => {\n          if (message.body) {\n            const receivedMessage = JSON.parse(message.body);\n            setChatMessages(prevMessages => [...prevMessages, {\n              sender: receivedMessage.sender,\n              content: receivedMessage.content,\n              date: new Date().toLocaleDateString(),\n              time: new Date().toLocaleTimeString()\n            }]);\n          }\n        });\n\n        // Subscribe to the user updates topic\n        stomp.subscribe(`/topic/users/${id}`, message => {\n          if (message.body) {\n            const userUpdate = JSON.parse(message.body);\n            setUsers(userUpdate.users); // Assuming message contains an array of users\n          }\n        });\n\n        setStompClient(stomp);\n      }, error => {\n        console.error('Error connecting to WebSocket:', error);\n      });\n\n      // Cleanup function to disconnect WebSocket on unmount\n      return () => {\n        stomp.disconnect();\n      };\n    }\n  }, [id]);\n  const handleAddComment = async () => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      alert('Session expired. Please log in again.');\n      return;\n    }\n    setAuthHeader(token);\n    try {\n      const userIdResponse = await request('GET', '/editor/getId', {\n        editorName: username\n      });\n      const userId = userIdResponse.data;\n      const projectResponse = await request('GET', '/project/getId', {\n        project_name: project\n      });\n      const projectId = projectResponse.data.id;\n      const commentBody = {\n        comment: newComment,\n        project_id: projectId\n      };\n      await request('POST', `/comment/post?userID=${userId}`, commentBody);\n      setComments(prevComments => [...prevComments, {\n        name: username,\n        comment: newComment,\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString()\n      }]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      alert('Failed to add comment. Please try again.');\n    }\n  };\n  const handleSendChatMessage = () => {\n    if (!stompClient) {\n      alert('Not connected to WebSocket');\n      return;\n    }\n    const chatMessage = {\n      sender: username,\n      content: newChatMessage,\n      type: 'CHAT'\n    };\n    stompClient.send(`/app/chat.sendMessage/${id}`, {}, JSON.stringify(chatMessage));\n\n    // Optionally, add the chat message locally to the UI\n    setChatMessages(prevMessages => [...prevMessages, {\n      sender: username,\n      content: newChatMessage,\n      date: new Date().toLocaleDateString(),\n      time: new Date().toLocaleTimeString()\n    }]);\n\n    // Clear the input field\n    setNewChatMessage('');\n  };\n  const handleUserClick = user => {\n    console.log(`User clicked: ${user}`);\n    // You can implement additional functionality here if needed\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collaborative-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), users.length > 0 ? users.map((user, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"user-button\",\n        onClick: () => handleUserClick(user),\n        children: user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No users online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};\n_s(Collaborative, \"tGCs+mKBBeNXT/5qwSanfc/Z4TQ=\", false, function () {\n  return [useLocation];\n});\n_c = Collaborative;\nexport default Collaborative;\nvar _c;\n$RefreshReg$(_c, \"Collaborative\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","SockJS","Stomp","request","setAuthHeader","Collaborative","location","project","state","id","setId","password","setPassword","comments","setComments","loading","setLoading","newComment","setNewComment","newChatMessage","setNewChatMessage","chatMessages","setChatMessages","users","setUsers","username","localStorage","getItem","stompClient","setStompClient","createRoom","token","alert","console","log","response","data","roomId","error","fetchComments","projectResponse","project_name","projectId","commentsResponse","project_id","socket","stomp","over","connect","subscribe","message","body","receivedMessage","JSON","parse","prevMessages","sender","content","date","Date","toLocaleDateString","time","toLocaleTimeString","userUpdate","disconnect","handleAddComment","userIdResponse","editorName","userId","commentBody","comment","prevComments","name","handleSendChatMessage","chatMessage","type","send","stringify","handleUserClick","user","length","map","index"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CollaborativeRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport '../../CSS/CollaborativeRoom.css'; \r\nimport { request, setAuthHeader } from '../../helpers/axios_helper'; \r\n\r\nconst Collaborative = () => {\r\n    const location = useLocation();\r\n    const { project } = location.state || {};\r\n    const [id, setId] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [newChatMessage, setNewChatMessage] = useState(''); // State for new chat message\r\n    const [chatMessages, setChatMessages] = useState([]); // State for chat messages\r\n    const [users, setUsers] = useState([]); // State for users\r\n    const username = localStorage.getItem('username');\r\n    const [stompClient, setStompClient] = useState(null); // State to hold the Stomp client\r\n\r\n    useEffect(() => {\r\n        const createRoom = async () => {\r\n            const token = localStorage.getItem('auth_token');\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token);\r\n\r\n            try {\r\n                console.log(\"Creating room...\");\r\n                const response = await request('post', '/room/create');\r\n                console.log(\"Response received:\", response);\r\n\r\n                if (response && response.data) {\r\n                    const { password, roomId } = response.data;\r\n                    console.log(`Room created with ID: ${roomId}, Password: ${password}`);\r\n                    setId(roomId);\r\n                    setPassword(password);\r\n                } else {\r\n                    console.error('Unexpected response format:', response);\r\n                    setId(null);\r\n                    setPassword(null);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating room:', error);\r\n                setId(null);\r\n                setPassword(null);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        const fetchComments = async () => {\r\n            const token = localStorage.getItem('auth_token');\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token);\r\n\r\n            try {\r\n                console.log(\"Fetching project ID...\");\r\n                const projectResponse = await request('GET', '/project/getId', { project_name: project });\r\n                console.log(\"Project ID response:\", projectResponse);\r\n\r\n                const projectId = projectResponse.data.id;\r\n\r\n                console.log(\"Fetching comments...\");\r\n                const commentsResponse = await request('GET', '/comment/read', { project_id: projectId });\r\n                console.log(\"Comments response:\", commentsResponse);\r\n\r\n                if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\r\n                    setComments(commentsResponse.data.comments);\r\n                } else {\r\n                    console.error('No comments found:', commentsResponse);\r\n                    setComments([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                setComments([]);\r\n            }\r\n        };\r\n\r\n        createRoom();\r\n        fetchComments();\r\n    }, [project]);\r\n\r\n    // WebSocket connection and subscription\r\n    useEffect(() => {\r\n        if (id) {\r\n            const socket = new SockJS('http://localhost:8082/app');\r\n            const stomp = Stomp.over(socket);\r\n\r\n            stomp.connect({}, () => {\r\n                console.log('Connected to WebSocket');\r\n\r\n                // Subscribe to the chat room topic for receiving messages\r\n                stomp.subscribe(`/topic/room/${id}`, (message) => {\r\n                    if (message.body) {\r\n                        const receivedMessage = JSON.parse(message.body);\r\n                        setChatMessages((prevMessages) => [\r\n                            ...prevMessages,\r\n                            {\r\n                                sender: receivedMessage.sender,\r\n                                content: receivedMessage.content,\r\n                                date: new Date().toLocaleDateString(),\r\n                                time: new Date().toLocaleTimeString()\r\n                            }\r\n                        ]);\r\n                    }\r\n                });\r\n\r\n                // Subscribe to the user updates topic\r\n                stomp.subscribe(`/topic/users/${id}`, (message) => {\r\n                    if (message.body) {\r\n                        const userUpdate = JSON.parse(message.body);\r\n                        setUsers(userUpdate.users); // Assuming message contains an array of users\r\n                    }\r\n                });\r\n\r\n                setStompClient(stomp);\r\n            }, (error) => {\r\n                console.error('Error connecting to WebSocket:', error);\r\n            });\r\n\r\n            // Cleanup function to disconnect WebSocket on unmount\r\n            return () => {\r\n                stomp.disconnect();\r\n            };\r\n        }\r\n    }, [id]);\r\n\r\n    const handleAddComment = async () => {\r\n        const token = localStorage.getItem('auth_token');\r\n        if (!token) {\r\n            alert('Session expired. Please log in again.');\r\n            return;\r\n        }\r\n\r\n        setAuthHeader(token);\r\n\r\n        try {\r\n            const userIdResponse = await request('GET', '/editor/getId', { editorName: username });\r\n            const userId = userIdResponse.data;\r\n\r\n            const projectResponse = await request('GET', '/project/getId', { project_name: project });\r\n            const projectId = projectResponse.data.id;\r\n\r\n            const commentBody = {\r\n                comment: newComment,\r\n                project_id: projectId\r\n            };\r\n\r\n            await request('POST', `/comment/post?userID=${userId}`, commentBody);\r\n\r\n            setComments((prevComments) => [\r\n                ...prevComments,\r\n                { name: username, comment: newComment, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n            ]);\r\n\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error);\r\n            alert('Failed to add comment. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleSendChatMessage = () => {\r\n        if (!stompClient) {\r\n            alert('Not connected to WebSocket');\r\n            return;\r\n        }\r\n\r\n        const chatMessage = {\r\n            sender: username,\r\n            content: newChatMessage,\r\n            type: 'CHAT'\r\n        };\r\n\r\n        stompClient.send(`/app/chat.sendMessage/${id}`, {}, JSON.stringify(chatMessage));\r\n\r\n        // Optionally, add the chat message locally to the UI\r\n        setChatMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: username, content: newChatMessage, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n        ]);\r\n\r\n        // Clear the input field\r\n        setNewChatMessage('');\r\n    };\r\n\r\n    const handleUserClick = (user) => {\r\n        console.log(`User clicked: ${user}`);\r\n        // You can implement additional functionality here if needed\r\n    };\r\n\r\n    return (\r\n        <div className=\"collaborative-container\">\r\n \r\n            <div className=\"user-list-section\">\r\n                <h3>Users</h3>\r\n                {users.length > 0 ? (\r\n                    users.map((user, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className=\"user-button\"\r\n                            onClick={() => handleUserClick(user)}\r\n                        >\r\n                            {user}\r\n                        </button>\r\n                    ))\r\n                ) : (\r\n                    <p>No users online</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Collaborative;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}