{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CollaborativeRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { useLocation } from 'react-router-dom';\nimport '../../CSS/CollaborativeRoom.css'; // Import your CSS file for styling\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collaborative = () => {\n  _s();\n  const location = useLocation();\n  const {\n    project\n  } = location.state || {};\n  const [id, setId] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newComment, setNewComment] = useState('');\n  const username = localStorage.getItem('username'); // Retrieve the username from local storage\n  const [stompClient, setStompClient] = useState(null);\n  useEffect(() => {\n    const createRoom = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        const response = await request('post', '/room/create');\n        if (response && response.data) {\n          const {\n            password,\n            roomId\n          } = response.data;\n          setId(roomId);\n          setPassword(password);\n        }\n      } catch (error) {\n        console.error('Error creating room:', error);\n        setId(null);\n        setPassword(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchComments = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        const projectResponse = await request('GET', '/project/getId', {\n          project_name: project\n        });\n        const projectId = projectResponse.data.id;\n        const commentsResponse = await request('GET', '/comment/read', {\n          project_id: projectId\n        });\n        if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\n          setComments(commentsResponse.data.comments);\n        } else {\n          setComments([]);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setComments([]);\n      }\n    };\n    const connectWebSocket = () => {\n      // Create WebSocket connection\n      const socket = new SockJS('http://localhost:8081/app');\n      const stomp = Stomp.over(socket);\n\n      // Connect the client\n      stomp.connect({}, () => {\n        console.log('Connected to WebSocket');\n\n        // Subscribe to the chat room topic\n        stomp.subscribe(`/topic/room/${id}`, message => {\n          if (message.body) {\n            const receivedMessage = JSON.parse(message.body);\n            setComments(prevComments => [...prevComments, {\n              name: receivedMessage.sender,\n              comment: receivedMessage.content,\n              date: new Date().toLocaleDateString(),\n              time: new Date().toLocaleTimeString()\n            }]);\n          }\n        });\n\n        // Save stompClient for later use (sending messages)\n        setStompClient(stomp);\n      }, error => {\n        console.error('Error connecting to WebSocket:', error);\n      });\n    };\n    createRoom();\n    fetchComments();\n    if (id) {\n      connectWebSocket();\n    }\n\n    // Cleanup on component unmount\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n      }\n    };\n  }, [id, project, stompClient]);\n  const handleAddComment = () => {\n    if (!stompClient) {\n      alert('Not connected to WebSocket');\n      return;\n    }\n    const chatMessage = {\n      sender: username,\n      content: newComment,\n      type: 'CHAT'\n    };\n\n    // Send the chat message to the WebSocket server\n    stompClient.send(`/app/chat.sendMessage/${id}`, {}, JSON.stringify(chatMessage));\n\n    // Optionally, add the comment locally to the UI (optimistic update)\n    setComments(prevComments => [...prevComments, {\n      name: username,\n      comment: newComment,\n      date: new Date().toLocaleDateString(),\n      time: new Date().toLocaleTimeString()\n    }]);\n\n    // Clear the input field\n    setNewComment('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collaborative-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-name-box\",\n      children: project ? `Collaborate on project: ${project}` : 'No Project'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"id-box\",\n      children: [loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), loading ? '' : password ? `Password: ${password}` : 'No Password']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 33\n          }, this), \": \", comment.comment, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [comment.date, \" \", comment.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(Collaborative, \"a+EfaIkoXwcgN9BP3QqmZ2CyJhk=\", false, function () {\n  return [useLocation];\n});\n_c = Collaborative;\nexport default Collaborative;\nvar _c;\n$RefreshReg$(_c, \"Collaborative\");","map":{"version":3,"names":["React","useState","useEffect","SockJS","Stomp","useLocation","request","setAuthHeader","Collaborative","location","project","state","id","setId","password","setPassword","comments","setComments","loading","setLoading","newComment","setNewComment","username","localStorage","getItem","stompClient","setStompClient","createRoom","token","alert","response","data","roomId","error","console","fetchComments","projectResponse","project_name","projectId","commentsResponse","project_id","connectWebSocket","socket","stomp","over","connect","log","subscribe","message","body","receivedMessage","JSON","parse","prevComments","name","sender","comment","content","date","Date","toLocaleDateString","time","toLocaleTimeString","disconnect","handleAddComment","chatMessage","type","send","stringify","length","map","index","e","target","value"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CollaborativeRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../../CSS/CollaborativeRoom.css'; // Import your CSS file for styling\r\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\r\n\r\nconst Collaborative = () => {\r\n    const location = useLocation();\r\n    const { project } = location.state || {};\r\n    const [id, setId] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [newComment, setNewComment] = useState('');\r\n    const username = localStorage.getItem('username'); // Retrieve the username from local storage\r\n    const [stompClient, setStompClient] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const createRoom = async () => {\r\n            const token = localStorage.getItem('auth_token');\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token);\r\n\r\n            try {\r\n                const response = await request('post', '/room/create');\r\n                if (response && response.data) {\r\n                    const { password, roomId } = response.data;\r\n                    setId(roomId);\r\n                    setPassword(password);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating room:', error);\r\n                setId(null);\r\n                setPassword(null);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        const fetchComments = async () => {\r\n            const token = localStorage.getItem('auth_token');\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token);\r\n\r\n            try {\r\n                const projectResponse = await request('GET', '/project/getId', { project_name: project });\r\n                const projectId = projectResponse.data.id;\r\n\r\n                const commentsResponse = await request('GET', '/comment/read', { project_id: projectId });\r\n                if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\r\n                    setComments(commentsResponse.data.comments);\r\n                } else {\r\n                    setComments([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                setComments([]);\r\n            }\r\n        };\r\n\r\n        const connectWebSocket = () => {\r\n            // Create WebSocket connection\r\n            const socket = new SockJS('http://localhost:8081/app');\r\n            const stomp = Stomp.over(socket);\r\n\r\n            // Connect the client\r\n            stomp.connect({}, () => {\r\n                console.log('Connected to WebSocket');\r\n\r\n                // Subscribe to the chat room topic\r\n                stomp.subscribe(`/topic/room/${id}`, (message) => {\r\n                    if (message.body) {\r\n                        const receivedMessage = JSON.parse(message.body);\r\n                        setComments((prevComments) => [\r\n                            ...prevComments,\r\n                            { name: receivedMessage.sender, comment: receivedMessage.content, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n                        ]);\r\n                    }\r\n                });\r\n\r\n                // Save stompClient for later use (sending messages)\r\n                setStompClient(stomp);\r\n            }, (error) => {\r\n                console.error('Error connecting to WebSocket:', error);\r\n            });\r\n        };\r\n\r\n        createRoom();\r\n        fetchComments();\r\n\r\n        if (id) {\r\n            connectWebSocket();\r\n        }\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            if (stompClient) {\r\n                stompClient.disconnect();\r\n            }\r\n        };\r\n    }, [id, project, stompClient]);\r\n\r\n    const handleAddComment = () => {\r\n        if (!stompClient) {\r\n            alert('Not connected to WebSocket');\r\n            return;\r\n        }\r\n\r\n        const chatMessage = {\r\n            sender: username,\r\n            content: newComment,\r\n            type: 'CHAT'\r\n        };\r\n\r\n        // Send the chat message to the WebSocket server\r\n        stompClient.send(`/app/chat.sendMessage/${id}`, {}, JSON.stringify(chatMessage));\r\n\r\n        // Optionally, add the comment locally to the UI (optimistic update)\r\n        setComments((prevComments) => [\r\n            ...prevComments,\r\n            { name: username, comment: newComment, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n        ]);\r\n\r\n        // Clear the input field\r\n        setNewComment('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"collaborative-container\">\r\n            <div className=\"project-name-box\">\r\n                {project ? `Collaborate on project: ${project}` : 'No Project'}\r\n            </div>\r\n            <div className=\"id-box\">\r\n                {loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID'}\r\n                <br />\r\n                {loading ? '' : password ? `Password: ${password}` : 'No Password'}\r\n            </div>\r\n            <div className=\"comments-section\">\r\n                <h3>Comments</h3>\r\n                {comments.length > 0 ? (\r\n                    <ul>\r\n                        {comments.map((comment, index) => (\r\n                            <li key={index}>\r\n                                <strong>{comment.name}</strong>: {comment.comment} <br />\r\n                                <small>{comment.date} {comment.time}</small>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No comments found.</p>\r\n                )}\r\n            </div>\r\n            <div className=\"add-comment-section\">\r\n                <textarea\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder=\"Add comment\"\r\n                />\r\n                <button onClick={handleAddComment}>Add Comment</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Collaborative;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}