{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CollaborativeRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { request, setAuthHeader } from './path/to/your/helper'; // Adjust the import path as necessary\nimport './Collaborative.css'; // Optional: Import your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collaborative = () => {\n  _s();\n  const location = useLocation();\n  const {\n    project\n  } = location.state || {}; // Access the passed project from state\n  const [id, setId] = useState(null); // State for room ID\n  const [password, setPassword] = useState(null); // State for password\n  const [comments, setComments] = useState([]); // State for comments\n  const [loading, setLoading] = useState(true); // Set loading state to true on component mount\n\n  useEffect(() => {\n    const createRoom = async () => {\n      const token = localStorage.getItem('auth_token'); // Fetch the auth token\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token); // Set the authorization header\n\n      try {\n        console.log(\"Creating room...\"); // Log before the request\n        const response = await request('post', '/room/create'); // Send POST request\n        console.log(\"Response received:\", response);\n\n        // Check if the response contains the expected data\n        if (response && response.data) {\n          const {\n            password,\n            roomId\n          } = response.data; // Destructure password and roomId\n          console.log(`Room created with ID: ${roomId}, Password: ${password}`);\n\n          // Set these values in the component state\n          setId(roomId); // Update room ID state\n          setPassword(password); // Update password state\n        } else {\n          console.error('Unexpected response format:', response);\n          setId(null); // Resetting the state in case of unexpected response\n          setPassword(null);\n        }\n      } catch (error) {\n        console.error('Error creating room:', error);\n        setId(null); // Resetting the state in case of error\n        setPassword(null);\n      } finally {\n        setLoading(false); // Reset loading state\n      }\n    };\n\n    const fetchComments = async () => {\n      const token = localStorage.getItem('auth_token'); // Fetch the auth token\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token); // Set the authorization header\n\n      try {\n        console.log(\"Fetching project ID...\"); // Log before the request\n        const projectResponse = await request('GET', '/project/getId', {\n          project_name: project\n        }); // Fetch project ID\n        console.log(\"Project ID response:\", projectResponse);\n        const projectId = projectResponse.data.id; // Get the project ID\n\n        console.log(\"Fetching comments...\"); // Log before the request\n        const commentsResponse = await request('GET', '/comment/read', {\n          project_id: projectId\n        }); // Fetch comments\n        console.log(\"Comments response:\", commentsResponse);\n\n        // Check if the response contains comments\n        if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\n          setComments(commentsResponse.data.comments); // Update comments state\n        } else {\n          console.error('No comments found:', commentsResponse);\n          setComments([]); // Resetting the state in case of no comments\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setComments([]); // Resetting the state in case of error\n      }\n    };\n\n    createRoom(); // Call the function to create a room on component mount\n    fetchComments(); // Call the function to fetch comments on component mount\n  }, []); // Empty dependency array to run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collaborative-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Collaborative Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), project ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Working on project: \", project]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No project selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 63\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-name-box\",\n      children: project ? `Collaborate to project: ${project}` : 'No Project'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"id-box\",\n      children: [loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), loading ? '' : password ? `Password: ${password}` : 'No Password']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this), \": \", comment.comment, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [comment.date, \" \", comment.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Collaborative, \"CUp7Y5H4yh58W2Hi4e6o+Iy/bjI=\", false, function () {\n  return [useLocation];\n});\n_c = Collaborative;\nexport default Collaborative;\nvar _c;\n$RefreshReg$(_c, \"Collaborative\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","request","setAuthHeader","Collaborative","location","project","state","id","setId","password","setPassword","comments","setComments","loading","setLoading","createRoom","token","localStorage","getItem","alert","console","log","response","data","roomId","error","fetchComments","projectResponse","project_name","projectId","commentsResponse","project_id","length","map","comment","index","name","date","time"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CollaborativeRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { request, setAuthHeader } from './path/to/your/helper'; // Adjust the import path as necessary\r\nimport './Collaborative.css'; // Optional: Import your CSS file for styling\r\n\r\nconst Collaborative = () => {\r\n    const location = useLocation();\r\n    const { project } = location.state || {}; // Access the passed project from state\r\n    const [id, setId] = useState(null); // State for room ID\r\n    const [password, setPassword] = useState(null); // State for password\r\n    const [comments, setComments] = useState([]); // State for comments\r\n    const [loading, setLoading] = useState(true); // Set loading state to true on component mount\r\n\r\n    useEffect(() => {\r\n        const createRoom = async () => {\r\n            const token = localStorage.getItem('auth_token'); // Fetch the auth token\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token); // Set the authorization header\r\n\r\n            try {\r\n                console.log(\"Creating room...\"); // Log before the request\r\n                const response = await request('post', '/room/create'); // Send POST request\r\n                console.log(\"Response received:\", response);\r\n\r\n                // Check if the response contains the expected data\r\n                if (response && response.data) {\r\n                    const { password, roomId } = response.data; // Destructure password and roomId\r\n                    console.log(`Room created with ID: ${roomId}, Password: ${password}`);\r\n\r\n                    // Set these values in the component state\r\n                    setId(roomId); // Update room ID state\r\n                    setPassword(password); // Update password state\r\n                } else {\r\n                    console.error('Unexpected response format:', response);\r\n                    setId(null); // Resetting the state in case of unexpected response\r\n                    setPassword(null);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating room:', error);\r\n                setId(null); // Resetting the state in case of error\r\n                setPassword(null);\r\n            } finally {\r\n                setLoading(false); // Reset loading state\r\n            }\r\n        };\r\n\r\n        const fetchComments = async () => {\r\n            const token = localStorage.getItem('auth_token'); // Fetch the auth token\r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token); // Set the authorization header\r\n\r\n            try {\r\n                console.log(\"Fetching project ID...\"); // Log before the request\r\n                const projectResponse = await request('GET', '/project/getId', { project_name: project }); // Fetch project ID\r\n                console.log(\"Project ID response:\", projectResponse);\r\n\r\n                const projectId = projectResponse.data.id; // Get the project ID\r\n\r\n                console.log(\"Fetching comments...\"); // Log before the request\r\n                const commentsResponse = await request('GET', '/comment/read', { project_id: projectId }); // Fetch comments\r\n                console.log(\"Comments response:\", commentsResponse);\r\n\r\n                // Check if the response contains comments\r\n                if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\r\n                    setComments(commentsResponse.data.comments); // Update comments state\r\n                } else {\r\n                    console.error('No comments found:', commentsResponse);\r\n                    setComments([]); // Resetting the state in case of no comments\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                setComments([]); // Resetting the state in case of error\r\n            }\r\n        };\r\n\r\n        createRoom(); // Call the function to create a room on component mount\r\n        fetchComments(); // Call the function to fetch comments on component mount\r\n    }, []); // Empty dependency array to run only once on mount\r\n\r\n    return (\r\n        <div className=\"collaborative-container\">\r\n            <h2>Collaborative Room</h2>\r\n            {project ? <p>Working on project: {project}</p> : <p>No project selected</p>}\r\n            <div className=\"project-name-box\">\r\n                {project ? `Collaborate to project: ${project}` : 'No Project'}\r\n            </div>\r\n            <div className=\"id-box\">\r\n                {loading ? 'Creating room...' : id ? `ID: ${id}` : 'No ID'}\r\n                <br />\r\n                {loading ? '' : password ? `Password: ${password}` : 'No Password'}\r\n            </div>\r\n            <div className=\"comments-section\">\r\n                <h3>Comments</h3>\r\n                {comments.length > 0 ? (\r\n                    <ul>\r\n                        {comments.map((comment, index) => (\r\n                            <li key={index}>\r\n                                <strong>{comment.name}</strong>: {comment.comment} <br />\r\n                                <small>{comment.date} {comment.time}</small>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No comments found.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Collaborative;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}