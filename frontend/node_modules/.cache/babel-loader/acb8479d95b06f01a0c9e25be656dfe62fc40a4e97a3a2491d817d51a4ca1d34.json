{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CreateSession.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../../CSS/CreateSession.css';\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateSession = () => {\n  _s();\n  const [projectType, setProjectType] = useState('');\n  const [languages, setLanguages] = useState([]); // State to store languages\n  const [loading, setLoading] = useState(false); // State for loading\n  const [projectName, setProjectName] = useState(''); // State for project name\n  const [selectedLanguage, setSelectedLanguage] = useState(''); // State for selected language\n\n  useEffect(() => {\n    if (projectType) {\n      fetchLanguages();\n    }\n  }, [projectType]);\n  const fetchLanguages = async () => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      alert('Session expired. Please log in again.');\n      return;\n    }\n    setAuthHeader(token);\n    setLoading(true);\n    try {\n      console.log(\"Fetching languages...\");\n      const response = await request('GET', '/project/languages');\n      console.log(\"Response received:\", response);\n      if (response && response.data && typeof response.data === 'object') {\n        const languagesList = Object.values(response.data);\n        setLanguages(languagesList);\n        console.log(\"Languages set:\", languagesList);\n      } else {\n        console.error('Unexpected response format:', response);\n        setLanguages([]);\n      }\n    } catch (error) {\n      console.error('Error fetching languages:', error);\n      setLanguages([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLanguageSelection = language => {\n    console.log(`Selected language: ${language}`);\n    setSelectedLanguage(language);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(`Creating project: ${projectName} with language: ${selectedLanguage}`);\n    // Add your project creation logic here\n  };\n\n  const colors = ['green-button', 'blue-button', 'red-button', 'yellow-button', 'purple-button', 'orange-button', 'teal-button', 'pink-button', 'brown-button', 'gray-button'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-session-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"project-button\",\n        onClick: () => setProjectType('new'),\n        children: \"New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"project-button\",\n        onClick: () => setProjectType('existing'),\n        children: \"Existing Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), projectType && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-project\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading languages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this) : languages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Languages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"language-buttons\",\n          children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `language-button ${colors[index % colors.length]}`,\n            onClick: () => handleLanguageSelection(language),\n            children: language\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No languages available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), selectedLanguage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"project-name-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"input-label\",\n            children: \"Enter Project Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: projectName,\n            onChange: e => setProjectName(e.target.value),\n            required: true,\n            className: \"project-name-input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"create-project-button\",\n          children: [\"Create \", selectedLanguage, \" Project\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateSession, \"tQubKID+GbqUWjhcUCXRb4Amsj0=\");\n_c = CreateSession;\nexport default CreateSession;\nvar _c;\n$RefreshReg$(_c, \"CreateSession\");","map":{"version":3,"names":["React","useState","useEffect","request","setAuthHeader","CreateSession","projectType","setProjectType","languages","setLanguages","loading","setLoading","projectName","setProjectName","selectedLanguage","setSelectedLanguage","fetchLanguages","token","localStorage","getItem","alert","console","log","response","data","languagesList","Object","values","error","handleLanguageSelection","language","handleSubmit","event","preventDefault","colors","length","map","index","e","target","value"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CreateSession.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../../CSS/CreateSession.css';\r\nimport { request, setAuthHeader } from '../../helpers/axios_helper'; \r\n\r\nconst CreateSession = () => {\r\n    const [projectType, setProjectType] = useState('');\r\n    const [languages, setLanguages] = useState([]); // State to store languages\r\n    const [loading, setLoading] = useState(false); // State for loading\r\n    const [projectName, setProjectName] = useState(''); // State for project name\r\n    const [selectedLanguage, setSelectedLanguage] = useState(''); // State for selected language\r\n\r\n    useEffect(() => {\r\n        if (projectType) {\r\n            fetchLanguages();\r\n        }\r\n    }, [projectType]);\r\n\r\n    const fetchLanguages = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('Session expired. Please log in again.');\r\n            return;\r\n        }\r\n\r\n        setAuthHeader(token);\r\n        setLoading(true);\r\n\r\n        try {\r\n            console.log(\"Fetching languages...\");\r\n            const response = await request('GET', '/project/languages');\r\n            console.log(\"Response received:\", response);\r\n\r\n            if (response && response.data && typeof response.data === 'object') {\r\n                const languagesList = Object.values(response.data); \r\n                setLanguages(languagesList);\r\n                console.log(\"Languages set:\", languagesList);\r\n            } else {\r\n                console.error('Unexpected response format:', response);\r\n                setLanguages([]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching languages:', error);\r\n            setLanguages([]);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleLanguageSelection = (language) => {\r\n        console.log(`Selected language: ${language}`);\r\n        setSelectedLanguage(language);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(`Creating project: ${projectName} with language: ${selectedLanguage}`);\r\n        // Add your project creation logic here\r\n    };\r\n\r\n    const colors = [\r\n        'green-button',\r\n        'blue-button',\r\n        'red-button',\r\n        'yellow-button',\r\n        'purple-button',\r\n        'orange-button', \r\n        'teal-button',    \r\n        'pink-button',    \r\n        'brown-button',\r\n        'gray-button'     \r\n    ];\r\n\r\n    return (\r\n        <div className=\"create-session-container\">\r\n            <h2>Create New Session</h2>\r\n            <div className=\"project-selection\">\r\n                <button className=\"project-button\" onClick={() => setProjectType('new')}>New Project</button>\r\n                <button className=\"project-button\" onClick={() => setProjectType('existing')}>Existing Project</button>\r\n            </div>\r\n\r\n            {projectType && (\r\n                <div className=\"selected-project\">\r\n                    {loading ? (\r\n                        <p>Loading languages...</p>\r\n                    ) : languages.length > 0 ? (\r\n                        <div className=\"language-list\">\r\n                            <h4>Languages:</h4>\r\n                            <div className=\"language-buttons\">\r\n                                {languages.map((language, index) => (\r\n                                    <button \r\n                                        key={index} \r\n                                        className={`language-button ${colors[index % colors.length]}`} \r\n                                        onClick={() => handleLanguageSelection(language)}\r\n                                    >\r\n                                        {language}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <p>No languages available.</p>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n{selectedLanguage && (\r\n    <div className=\"project-name-container\">\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"project-name-input\">\r\n                <span className=\"input-label\">Enter Project Name:</span>\r\n                <input\r\n                    type=\"text\"\r\n                    value={projectName}\r\n                    onChange={(e) => setProjectName(e.target.value)}\r\n                    required\r\n                    className=\"project-name-input-field\"\r\n                />\r\n            </div>\r\n            \r\n            <button type=\"submit\" className=\"create-project-button\">\r\n    Create {selectedLanguage} Project\r\n</button>\r\n        </form>\r\n    </div>\r\n)}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateSession;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}