{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CreateSession.js\",\n  _s = $RefreshSig$();\n// src/components/CreateSession.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../CSS/CreateSession.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateSession = () => {\n  _s();\n  const [projectType, setProjectType] = useState('');\n  const [languages, setLanguages] = useState([]); // State to store languages\n  const navigate = useNavigate();\n\n  // Fetch languages from the API when projectType changes\n  useEffect(() => {\n    if (projectType) {\n      fetchLanguages();\n    }\n  }, [projectType]);\n  const fetchLanguages = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/project/languages');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setLanguages(data); // Set languages in state\n    } catch (error) {\n      console.error('Error fetching languages:', error);\n      setLanguages([]); // Reset languages on error\n    }\n  };\n\n  const handleProjectSelection = () => {\n    // Navigate to the appropriate route based on the selected project type\n    if (projectType === 'new') {\n      navigate('/create-new-project'); // Navigate to New Project component\n    } else if (projectType === 'existing') {\n      navigate('/select-existing-project'); // Navigate to Existing Project component\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-session-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"project-button\",\n        onClick: () => setProjectType('new'),\n        children: \"New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"project-button\",\n        onClick: () => setProjectType('existing'),\n        children: \"Existing Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), projectType && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-project\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"You selected: \", projectType === 'new' ? 'New Project' : 'Existing Project']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), languages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Available Languages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: language\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading languages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"proceed-button\",\n        onClick: handleProjectSelection,\n        children: \"Proceed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateSession, \"y7VC9tbd5nanPBM/DRnySZiBeAM=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateSession;\nexport default CreateSession;\nvar _c;\n$RefreshReg$(_c, \"CreateSession\");","map":{"version":3,"names":["React","useState","useNavigate","CreateSession","projectType","setProjectType","languages","setLanguages","navigate","useEffect","fetchLanguages","response","fetch","ok","Error","data","json","error","console","handleProjectSelection","length","map","language","index"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CreateSession.js"],"sourcesContent":["// src/components/CreateSession.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../../CSS/CreateSession.css'; // Import the CSS file\r\n\r\nconst CreateSession = () => {\r\n    const [projectType, setProjectType] = useState('');\r\n    const [languages, setLanguages] = useState([]); // State to store languages\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch languages from the API when projectType changes\r\n    useEffect(() => {\r\n        if (projectType) {\r\n            fetchLanguages();\r\n        }\r\n    }, [projectType]);\r\n\r\n    const fetchLanguages = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/project/languages');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.json();\r\n            setLanguages(data); // Set languages in state\r\n        } catch (error) {\r\n            console.error('Error fetching languages:', error);\r\n            setLanguages([]); // Reset languages on error\r\n        }\r\n    };\r\n\r\n    const handleProjectSelection = () => {\r\n        // Navigate to the appropriate route based on the selected project type\r\n        if (projectType === 'new') {\r\n            navigate('/create-new-project'); // Navigate to New Project component\r\n        } else if (projectType === 'existing') {\r\n            navigate('/select-existing-project'); // Navigate to Existing Project component\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"create-session-container\">\r\n            <h2>Create New Session</h2>\r\n            <div className=\"project-selection\">\r\n                <button className=\"project-button\" onClick={() => setProjectType('new')}>New Project</button>\r\n                <button className=\"project-button\" onClick={() => setProjectType('existing')}>Existing Project</button>\r\n            </div>\r\n            {projectType && (\r\n                <div className=\"selected-project\">\r\n                    <h4>You selected: {projectType === 'new' ? 'New Project' : 'Existing Project'}</h4>\r\n                    {languages.length > 0 ? (\r\n                        <div className=\"language-list\">\r\n                            <h4>Available Languages:</h4>\r\n                            <ul>\r\n                                {languages.map((language, index) => (\r\n                                    <li key={index}>{language}</li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    ) : (\r\n                        <p>Loading languages...</p>\r\n                    )}\r\n                    <button className=\"proceed-button\" onClick={handleProjectSelection}>Proceed</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateSession;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}