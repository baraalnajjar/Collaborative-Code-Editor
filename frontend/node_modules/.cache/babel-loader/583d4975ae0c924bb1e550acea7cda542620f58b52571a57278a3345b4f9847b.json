{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\CollaborativeRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport '../../CSS/CollaborativeRoom.css';\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collaborative = () => {\n  _s();\n  const location = useLocation();\n  const {\n    project\n  } = location.state || {};\n  const [id, setId] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newComment, setNewComment] = useState('');\n  const [users, setUsers] = useState([]); // State for users\n  const username = localStorage.getItem('username');\n  useEffect(() => {\n    const createRoom = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        console.log(\"Creating room...\");\n        const response = await request('post', '/room/create');\n        console.log(\"Response received:\", response);\n        if (response && response.data) {\n          const {\n            password,\n            roomId\n          } = response.data;\n          console.log(`Room created with ID: ${roomId}, Password: ${password}`);\n          setId(roomId);\n          setPassword(password);\n        } else {\n          console.error('Unexpected response format:', response);\n          setId(null);\n          setPassword(null);\n        }\n      } catch (error) {\n        console.error('Error creating room:', error);\n        setId(null);\n        setPassword(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchComments = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        alert('Session expired. Please log in again.');\n        return;\n      }\n      setAuthHeader(token);\n      try {\n        console.log(\"Fetching project ID...\");\n        const projectResponse = await request('GET', '/project/getId', {\n          project_name: project\n        });\n        console.log(\"Project ID response:\", projectResponse);\n        const projectId = projectResponse.data.id;\n        console.log(\"Fetching comments...\");\n        const commentsResponse = await request('GET', '/comment/read', {\n          project_id: projectId\n        });\n        console.log(\"Comments response:\", commentsResponse);\n        if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\n          setComments(commentsResponse.data.comments);\n        } else {\n          console.error('No comments found:', commentsResponse);\n          setComments([]);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setComments([]);\n      }\n    };\n    createRoom();\n    fetchComments();\n  }, [project]);\n  const handleAddComment = async () => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      alert('Session expired. Please log in again.');\n      return;\n    }\n    setAuthHeader(token);\n    try {\n      const userIdResponse = await request('GET', '/editor/getId', {\n        editorName: username\n      });\n      const userId = userIdResponse.data;\n      const projectResponse = await request('GET', '/project/getId', {\n        project_name: project\n      });\n      const projectId = projectResponse.data.id;\n      const commentBody = {\n        comment: newComment,\n        project_id: projectId\n      };\n      const postCommentResponse = await request('POST', `/comment/post?userID=${userId}`, commentBody);\n      setComments(prevComments => [...prevComments, {\n        name: username,\n        comment: newComment,\n        date: new Date().toLocaleDateString(),\n        time: new Date().toLocaleTimeString()\n      }]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      alert('Failed to add comment. Please try again.');\n    }\n  };\n  const handleUserClick = user => {\n    console.log(`User clicked: ${user}`);\n    // You can implement additional functionality here if needed\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collaborative-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this), \": \", comment.comment, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 84\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [comment.date, \" \", comment.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-comment-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Add comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newComment // You can use a different state for chat messages if needed\n          ,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), users.length > 0 ? users.map((user, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"user-button\",\n          onClick: () => handleUserClick(user),\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No users online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_s(Collaborative, \"nWqH27lXNDdAnNZmeuXzC4qfsSY=\", false, function () {\n  return [useLocation];\n});\n_c = Collaborative;\nexport default Collaborative;\nvar _c;\n$RefreshReg$(_c, \"Collaborative\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","request","setAuthHeader","Collaborative","location","project","state","id","setId","password","setPassword","comments","setComments","loading","setLoading","newComment","setNewComment","users","setUsers","username","localStorage","getItem","createRoom","token","alert","console","log","response","data","roomId","error","fetchComments","projectResponse","project_name","projectId","commentsResponse","project_id","handleAddComment","userIdResponse","editorName","userId","commentBody","comment","postCommentResponse","prevComments","name","date","Date","toLocaleDateString","time","toLocaleTimeString","handleUserClick","user","length","map","index","e","target","value"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/CollaborativeRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../../CSS/CollaborativeRoom.css'; \r\nimport { request, setAuthHeader } from '../../helpers/axios_helper'; \r\n\r\nconst Collaborative = () => {\r\n    const location = useLocation();\r\n    const { project } = location.state || {}; \r\n    const [id, setId] = useState(null); \r\n    const [password, setPassword] = useState(null); \r\n    const [comments, setComments] = useState([]); \r\n    const [loading, setLoading] = useState(true); \r\n    const [newComment, setNewComment] = useState(''); \r\n    const [users, setUsers] = useState([]); // State for users\r\n    const username = localStorage.getItem('username'); \r\n\r\n    useEffect(() => {\r\n        const createRoom = async () => {\r\n            const token = localStorage.getItem('auth_token'); \r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n\r\n            setAuthHeader(token); \r\n\r\n            try {\r\n                console.log(\"Creating room...\"); \r\n                const response = await request('post', '/room/create'); \r\n                console.log(\"Response received:\", response);\r\n\r\n                if (response && response.data) {\r\n                    const { password, roomId } = response.data; \r\n                    console.log(`Room created with ID: ${roomId}, Password: ${password}`);\r\n\r\n                    setId(roomId); \r\n                    setPassword(password); \r\n                } else {\r\n                    console.error('Unexpected response format:', response);\r\n                    setId(null); \r\n                    setPassword(null);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error creating room:', error);\r\n                setId(null); \r\n                setPassword(null);\r\n            } finally {\r\n                setLoading(false); \r\n            }\r\n        };\r\n\r\n        const fetchComments = async () => {\r\n            const token = localStorage.getItem('auth_token'); \r\n            if (!token) {\r\n                alert('Session expired. Please log in again.');\r\n                return;\r\n            }\r\n        \r\n            setAuthHeader(token); \r\n        \r\n            try {\r\n                console.log(\"Fetching project ID...\"); \r\n                const projectResponse = await request('GET', '/project/getId', { project_name: project }); \r\n                console.log(\"Project ID response:\", projectResponse);\r\n        \r\n                const projectId = projectResponse.data.id; \r\n        \r\n                console.log(\"Fetching comments...\"); \r\n                const commentsResponse = await request('GET', '/comment/read', { project_id: projectId }); \r\n                console.log(\"Comments response:\", commentsResponse);\r\n        \r\n                if (commentsResponse && commentsResponse.data && commentsResponse.data.comments) {\r\n                    setComments(commentsResponse.data.comments); \r\n                } else {\r\n                    console.error('No comments found:', commentsResponse);\r\n                    setComments([]); \r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching comments:', error);\r\n                setComments([]); \r\n            }\r\n        };\r\n\r\n        createRoom(); \r\n        fetchComments(); \r\n    }, [project]); \r\n\r\n    const handleAddComment = async () => {\r\n        const token = localStorage.getItem('auth_token'); \r\n        if (!token) {\r\n            alert('Session expired. Please log in again.');\r\n            return;\r\n        }\r\n    \r\n        setAuthHeader(token); \r\n    \r\n        try {\r\n            const userIdResponse = await request('GET', '/editor/getId', { editorName: username });\r\n            const userId = userIdResponse.data; \r\n    \r\n            const projectResponse = await request('GET', '/project/getId', { project_name: project });\r\n            const projectId = projectResponse.data.id; \r\n    \r\n            const commentBody = {\r\n                comment: newComment,\r\n                project_id: projectId \r\n            };\r\n    \r\n            const postCommentResponse = await request('POST', `/comment/post?userID=${userId}`, commentBody);\r\n    \r\n            setComments((prevComments) => [\r\n                ...prevComments,\r\n                { name: username, comment: newComment, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString() }\r\n            ]);\r\n    \r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error);\r\n            alert('Failed to add comment. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleUserClick = (user) => {\r\n        console.log(`User clicked: ${user}`);\r\n        // You can implement additional functionality here if needed\r\n    };\r\n\r\n    return (\r\n        <div className=\"collaborative-container\">\r\n            <div className=\"comments-section\">\r\n                <h3>Comments</h3>\r\n                {comments.length > 0 ? (\r\n                    <ul>\r\n                        {comments.map((comment, index) => (\r\n                            <li key={index}>\r\n                                <strong>{comment.name}</strong>: {comment.comment} <br />\r\n                                <small>{comment.date} {comment.time}</small>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p>No comments found.</p>\r\n                )}\r\n                <div className=\"add-comment-section\">\r\n                    <textarea \r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Add comment\"\r\n                    />\r\n                    <button onClick={handleAddComment}>Add Comment</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat-container\">\r\n                <div className=\"chat-section\">\r\n                    <h3>Chat</h3>\r\n                    <div className=\"chat-messages\">\r\n                        <ul>\r\n                            {/* You can map through chat messages here */}\r\n                        </ul>\r\n                    </div>\r\n                    <textarea\r\n                        value={newComment} // You can use a different state for chat messages if needed\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={handleAddComment}>Send</button>\r\n                </div>\r\n                <div className=\"user-list-section\">\r\n                    <h3>Users</h3>\r\n                    {users.length > 0 ? (\r\n                        users.map((user, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className=\"user-button\"\r\n                                onClick={() => handleUserClick(user)}\r\n                            >\r\n                                {user}\r\n                            </button>\r\n                        ))\r\n                    ) : (\r\n                        <p>No users online</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Collaborative;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}