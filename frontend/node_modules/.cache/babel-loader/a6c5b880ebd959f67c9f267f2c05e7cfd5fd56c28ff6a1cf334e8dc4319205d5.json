{"ast":null,"code":"import axios from 'axios';\nexport const getAuthToken = () => {\n  return window.localStorage.getItem('auth_token');\n};\nexport const setAuthHeader = token => {\n  if (token !== null) {\n    window.localStorage.setItem(\"auth_token\", token);\n  } else {\n    window.localStorage.removeItem(\"auth_token\");\n  }\n};\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nexport const request = function (method, url) {\n  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let headers = {};\n  if (getAuthToken() !== null && getAuthToken() !== \"null\") {\n    headers = {\n      'Authorization': `Bearer ${getAuthToken()}`\n    };\n  }\n\n  // Prepare the URL with query parameters for GET requests\n  if (method.toUpperCase() === 'GET' && data) {\n    const queryParams = new URLSearchParams(data).toString();\n    url = `${url}?${queryParams}`; // Append query parameters to the URL\n  }\n\n  return axios({\n    method: method,\n    url: url,\n    headers: headers,\n    data: method.toUpperCase() !== 'GET' ? data : null // Include body only if it's not a GET request\n  });\n};","map":{"version":3,"names":["axios","getAuthToken","window","localStorage","getItem","setAuthHeader","token","setItem","removeItem","defaults","baseURL","headers","post","request","method","url","data","toUpperCase","queryParams","URLSearchParams","toString"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/helpers/axios_helper.js"],"sourcesContent":["import axios from 'axios';\n\n\nexport const getAuthToken = () => {\n    return window.localStorage.getItem('auth_token');\n};\n\nexport const setAuthHeader = (token) => {\n    if (token !== null) {\n      window.localStorage.setItem(\"auth_token\", token);\n    } else {\n      window.localStorage.removeItem(\"auth_token\");\n    }\n};\n\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nexport const request = (method, url, data = null) => {\n  let headers = {};\n  if (getAuthToken() !== null && getAuthToken() !== \"null\") {\n      headers = {'Authorization': `Bearer ${getAuthToken()}`};\n  }\n\n  // Prepare the URL with query parameters for GET requests\n  if (method.toUpperCase() === 'GET' && data) {\n      const queryParams = new URLSearchParams(data).toString();\n      url = `${url}?${queryParams}`; // Append query parameters to the URL\n  }\n\n  return axios({\n      method: method,\n      url: url,\n      headers: headers,\n      data: method.toUpperCase() !== 'GET' ? data : null // Include body only if it's not a GET request\n  });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,YAAY,GAAG,MAAM;EAC9B,OAAOC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;AACpD,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EACpC,IAAIA,KAAK,KAAK,IAAI,EAAE;IAClBJ,MAAM,CAACC,YAAY,CAACI,OAAO,CAAC,YAAY,EAAED,KAAK,CAAC;EAClD,CAAC,MAAM;IACLJ,MAAM,CAACC,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC;EAC9C;AACJ,CAAC;AAEDR,KAAK,CAACS,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAChDV,KAAK,CAACS,QAAQ,CAACE,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAEhE,OAAO,MAAMC,OAAO,GAAG,UAACC,MAAM,EAAEC,GAAG,EAAkB;EAAA,IAAhBC,IAAI,uEAAG,IAAI;EAC9C,IAAIL,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIV,YAAY,EAAE,KAAK,IAAI,IAAIA,YAAY,EAAE,KAAK,MAAM,EAAE;IACtDU,OAAO,GAAG;MAAC,eAAe,EAAG,UAASV,YAAY,EAAG;IAAC,CAAC;EAC3D;;EAEA;EACA,IAAIa,MAAM,CAACG,WAAW,EAAE,KAAK,KAAK,IAAID,IAAI,EAAE;IACxC,MAAME,WAAW,GAAG,IAAIC,eAAe,CAACH,IAAI,CAAC,CAACI,QAAQ,EAAE;IACxDL,GAAG,GAAI,GAAEA,GAAI,IAAGG,WAAY,EAAC,CAAC,CAAC;EACnC;;EAEA,OAAOlB,KAAK,CAAC;IACTc,MAAM,EAAEA,MAAM;IACdC,GAAG,EAAEA,GAAG;IACRJ,OAAO,EAAEA,OAAO;IAChBK,IAAI,EAAEF,MAAM,CAACG,WAAW,EAAE,KAAK,KAAK,GAAGD,IAAI,GAAG,IAAI,CAAC;EACvD,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}