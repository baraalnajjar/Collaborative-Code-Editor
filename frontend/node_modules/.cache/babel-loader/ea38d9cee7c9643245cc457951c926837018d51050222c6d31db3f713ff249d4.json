{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\JoinSession.js\",\n  _s = $RefreshSig$();\n// src/components/JoinSession.js\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport '../../CSS/JoinSession.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoinSession = () => {\n  _s();\n  const [sessionCode, setSessionCode] = useState(''); // Room ID\n  const [projectName, setProjectName] = useState(''); // Project Name\n  const [password, setPassword] = useState(''); // Room Password\n  const username = localStorage.getItem('username'); // Username from localStorage\n  const [stompClient, setStompClient] = useState(null); // For Stomp client\n\n  const handleJoinSession = () => {\n    console.log('Joined session:', sessionCode);\n    console.log('Password:', password);\n    console.log('Project Name:', projectName);\n    console.log('Username:', username);\n\n    // Connect to WebSocket when joining the session\n    const socket = new SockJS('http://localhost:8082/app'); // Adjust URL as needed\n    const stomp = Stomp.over(socket);\n    stomp.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n\n      // Prepare the chat message to send\n      const chatMessage = {\n        sender: username,\n        password: password\n      };\n\n      // Send the message to join the session\n      stomp.send(`/app/chat.addUser/${sessionCode}`, {}, JSON.stringify(chatMessage));\n\n      // Subscribe to room messages\n      stomp.subscribe(`/topic/room/${sessionCode}`, message => {\n        if (message.body) {\n          const receivedMessage = JSON.parse(message.body);\n          console.log('Received message:', receivedMessage);\n          // Handle received messages here (e.g., update state)\n        }\n      });\n\n      // Subscribe to user updates\n      stomp.subscribe(`/topic/users/${sessionCode}`, message => {\n        if (message.body) {\n          const userUpdate = JSON.parse(message.body);\n          console.log('User update:', userUpdate);\n          // Handle user updates here (e.g., update state)\n        }\n      });\n\n      setStompClient(stomp); // Store the stomp client for future use\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n    });\n  };\n  useEffect(() => {\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n        console.log('Disconnected from WebSocket');\n      }\n    };\n  }, [stompClient]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"join-session-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Join a Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter room ID\",\n      value: sessionCode,\n      onChange: e => {\n        setSessionCode(e.target.value) && localStorage.setItem('sessionCode', sessionCode); // Store the username\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Enter room password\",\n      value: password,\n      onChange: e => {\n        setPassword(e.target.value) && localStorage.setItem('password', password);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter project name\",\n      value: projectName,\n      onChange: e => setProjectName(e.target.value) && localStorage.setItem('projectName', projectName) // Fixed function name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleJoinSession,\n      children: \"Join Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(JoinSession, \"X9LagymTozz9UidVUl65WyHKs3A=\");\n_c = JoinSession;\nexport default JoinSession;\nvar _c;\n$RefreshReg$(_c, \"JoinSession\");","map":{"version":3,"names":["React","useState","useEffect","SockJS","Stomp","JoinSession","sessionCode","setSessionCode","projectName","setProjectName","password","setPassword","username","localStorage","getItem","stompClient","setStompClient","handleJoinSession","console","log","socket","stomp","over","connect","frame","chatMessage","sender","send","JSON","stringify","subscribe","message","body","receivedMessage","parse","userUpdate","error","disconnect","e","target","value","setItem"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/JoinSession.js"],"sourcesContent":["// src/components/JoinSession.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport '../../CSS/JoinSession.css'; // Import the CSS file\r\n\r\nconst JoinSession = () => {\r\n  const [sessionCode, setSessionCode] = useState('');  // Room ID\r\n  const [projectName, setProjectName] = useState('');  // Project Name\r\n  const [password, setPassword] = useState('');         // Room Password\r\n  const username = localStorage.getItem('username');    // Username from localStorage\r\n  const [stompClient, setStompClient] = useState(null); // For Stomp client\r\n\r\n  const handleJoinSession = () => {\r\n    console.log('Joined session:', sessionCode);\r\n    console.log('Password:', password);\r\n    console.log('Project Name:', projectName);\r\n    console.log('Username:', username);\r\n\r\n    // Connect to WebSocket when joining the session\r\n    const socket = new SockJS('http://localhost:8082/app'); // Adjust URL as needed\r\n    const stomp = Stomp.over(socket);\r\n\r\n    stomp.connect({}, (frame) => {\r\n      console.log('Connected to WebSocket:', frame);\r\n\r\n      // Prepare the chat message to send\r\n      const chatMessage = {\r\n        sender: username,\r\n        password: password,\r\n      };\r\n\r\n      // Send the message to join the session\r\n      stomp.send(`/app/chat.addUser/${sessionCode}`, {}, JSON.stringify(chatMessage));\r\n\r\n      // Subscribe to room messages\r\n      stomp.subscribe(`/topic/room/${sessionCode}`, (message) => {\r\n        if (message.body) {\r\n          const receivedMessage = JSON.parse(message.body);\r\n          console.log('Received message:', receivedMessage);\r\n          // Handle received messages here (e.g., update state)\r\n        }\r\n      });\r\n\r\n      // Subscribe to user updates\r\n      stomp.subscribe(`/topic/users/${sessionCode}`, (message) => {\r\n        if (message.body) {\r\n          const userUpdate = JSON.parse(message.body);\r\n          console.log('User update:', userUpdate);\r\n          // Handle user updates here (e.g., update state)\r\n        }\r\n      });\r\n\r\n      setStompClient(stomp); // Store the stomp client for future use\r\n    }, (error) => {\r\n      console.error('Error connecting to WebSocket:', error);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.disconnect();\r\n        console.log('Disconnected from WebSocket');\r\n      }\r\n    };\r\n  }, [stompClient]);\r\n\r\n  return (\r\n    <div className=\"join-session-container\"> \r\n      <h2>Join a Room</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter room ID\"\r\n        value={sessionCode}\r\n        onChange={(e) => {setSessionCode(e.target.value) && localStorage.setItem('sessionCode', sessionCode) // Store the username\r\n        }}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Enter room password\"\r\n        value={password}\r\n        onChange={(e) => { setPassword(e.target.value) && localStorage.setItem('password', password) } }\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter project name\"\r\n        value={projectName}\r\n        onChange={(e) => setProjectName(e.target.value) && localStorage.setItem('projectName', projectName)} // Fixed function name\r\n      />\r\n      <button onClick={handleJoinSession}>Join Session</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JoinSession;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}