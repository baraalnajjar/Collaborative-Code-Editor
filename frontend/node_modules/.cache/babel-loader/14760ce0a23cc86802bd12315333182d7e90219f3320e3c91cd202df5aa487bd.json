{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\JoinSession.js\",\n  _s = $RefreshSig$();\n// src/components/JoinSession.js\nimport React, { useState, useEffect } from 'react';\nimport '../../CSS/JoinSession.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoinSession = () => {\n  _s();\n  const [sessionCode, setSessionCode] = useState(''); // Room ID\n  const [projectName, setProjectName] = useState(''); // Project Name\n  const [password, setPassword] = useState(''); // Room Password\n  const username = localStorage.getItem('username'); // Username from localStorage\n  const [socket, setSocket] = useState(null); // WebSocket connection\n\n  useEffect(() => {\n    // Create WebSocket connection\n    const newSocket = new WebSocket('ws://localhost:8082/chat'); // Adjust URL as needed\n\n    newSocket.onopen = () => {\n      console.log('WebSocket connection established');\n    };\n    newSocket.onmessage = message => {\n      console.log('Message from server:', message.data);\n      // You can add logic to handle messages received from the server here\n    };\n\n    newSocket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    setSocket(newSocket); // Set the socket state\n\n    // Clean up on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []); // Empty dependency array to run only once when the component mounts\n\n  const handleJoinSession = () => {\n    // Prepare the chat message\n    const chatMessage = {\n      sender: username,\n      password: password,\n      type: 'TEXT' // Ensure this is a string\n    };\n\n    // Send the message through WebSocket\n    if (socket) {\n      socket.send(JSON.stringify({\n        roomId: sessionCode,\n        chatMessage\n      }));\n      console.log('Joined session:', sessionCode);\n      console.log('Password:', password);\n      console.log('Username:', username);\n      console.log('Project Name:', projectName); // Log project name if needed\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"join-session-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Join a Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter room ID\",\n      value: sessionCode,\n      onChange: e => setSessionCode(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Enter room password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter project name\",\n      value: projectName,\n      onChange: e => setProjectName(e.target.value) // Fixed function name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleJoinSession,\n      children: \"Join Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(JoinSession, \"g8heIHW37QFmVBODhfQRXxaHva4=\");\n_c = JoinSession;\nexport default JoinSession;\nvar _c;\n$RefreshReg$(_c, \"JoinSession\");","map":{"version":3,"names":["React","useState","useEffect","JoinSession","sessionCode","setSessionCode","projectName","setProjectName","password","setPassword","username","localStorage","getItem","socket","setSocket","newSocket","WebSocket","onopen","console","log","onmessage","message","data","onclose","close","handleJoinSession","chatMessage","sender","type","send","JSON","stringify","roomId","error","e","target","value"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/JoinSession.js"],"sourcesContent":["// src/components/JoinSession.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../../CSS/JoinSession.css'; // Import the CSS file\r\n\r\nconst JoinSession = () => {\r\n  const [sessionCode, setSessionCode] = useState('');  // Room ID\r\n  const [projectName, setProjectName] = useState('');  // Project Name\r\n  const [password, setPassword] = useState('');         // Room Password\r\n  const username = localStorage.getItem('username');    // Username from localStorage\r\n  const [socket, setSocket] = useState(null);           // WebSocket connection\r\n\r\n  useEffect(() => {\r\n    // Create WebSocket connection\r\n    const newSocket = new WebSocket('ws://localhost:8082/chat'); // Adjust URL as needed\r\n\r\n    newSocket.onopen = () => {\r\n      console.log('WebSocket connection established');\r\n    };\r\n\r\n    newSocket.onmessage = (message) => {\r\n      console.log('Message from server:', message.data);\r\n      // You can add logic to handle messages received from the server here\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n    };\r\n\r\n    setSocket(newSocket); // Set the socket state\r\n\r\n    // Clean up on component unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []); // Empty dependency array to run only once when the component mounts\r\n\r\n  const handleJoinSession = () => {\r\n    // Prepare the chat message\r\n    const chatMessage = {\r\n      sender: username,\r\n      password: password,\r\n      type: 'TEXT', // Ensure this is a string\r\n    };\r\n\r\n    // Send the message through WebSocket\r\n    if (socket) {\r\n      socket.send(JSON.stringify({ roomId: sessionCode, chatMessage }));\r\n      console.log('Joined session:', sessionCode);\r\n      console.log('Password:', password);\r\n      console.log('Username:', username);\r\n      console.log('Project Name:', projectName); // Log project name if needed\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"join-session-container\"> \r\n      <h2>Join a Room</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter room ID\"\r\n        value={sessionCode}\r\n        onChange={(e) => setSessionCode(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Enter room password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter project name\"\r\n        value={projectName}\r\n        onChange={(e) => setProjectName(e.target.value)} // Fixed function name\r\n      />\r\n      <button onClick={handleJoinSession}>Join Session</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JoinSession;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}