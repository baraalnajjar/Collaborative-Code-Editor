{"ast":null,"code":"var _jsxFileName = \"D:\\\\myRepositories\\\\Atypon\\\\Final Project\\\\frontend\\\\src\\\\components\\\\editor\\\\SelectExistingProject.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\nimport '../../CSS/SelectExistingProject.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectExistingProject = () => {\n  _s();\n  const location = useLocation();\n  const {\n    language\n  } = location.state || {}; // Access the passed language from state\n  const [projects, setProjects] = useState([]); // State to hold the project names\n  const [loading, setLoading] = useState(false); // State for loading\n  const [error, setError] = useState(null); // State for error handling\n\n  useEffect(() => {\n    if (language) {\n      fetchProjects();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [language]);\n\n  // Function to fetch projects based on the selected language\n  const fetchProjects = async () => {\n    setLoading(true); // Set loading state to true\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      alert('Session expired. Please log in again.');\n      return;\n    }\n    setAuthHeader(token); // Set the authorization header\n\n    try {\n      console.log(\"Fetching projects for language:\", language);\n      const response = await request('GET', `/project?language=${language}`); // Make the API call\n      console.log(\"Response received:\", response); // Log the response\n      setProjects(response.data.projects || []); // Set the projects state\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      setError('Failed to fetch projects.'); // Set error message\n    } finally {\n      setLoading(false); // Reset loading state\n    }\n  };\n\n  const handleProjectSelection = project => {\n    console.log(`Selected project: ${project}`);\n    // Navigate to the project details or editing page here\n    // Example: navigate(`/project-details/${project}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-existing-project\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Existing Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading projects...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }, this), language ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [language, \" Projects:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), projects.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: projects.map((project, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"project-button\",\n          children: project\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }, this) // Render project names as buttons\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No \", language, \" projects found.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No language selected.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectExistingProject, \"7NBj12FIuCPFKXWFkzy90dJxET8=\", false, function () {\n  return [useLocation];\n});\n_c = SelectExistingProject;\nexport default SelectExistingProject;\nvar _c;\n$RefreshReg$(_c, \"SelectExistingProject\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","request","setAuthHeader","SelectExistingProject","location","language","state","projects","setProjects","loading","setLoading","error","setError","fetchProjects","token","localStorage","getItem","alert","console","log","response","data","handleProjectSelection","project","length","map","index"],"sources":["D:/myRepositories/Atypon/Final Project/frontend/src/components/editor/SelectExistingProject.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { request, setAuthHeader } from '../../helpers/axios_helper';\r\nimport '../../CSS/SelectExistingProject.css'\r\n\r\nconst SelectExistingProject = () => {\r\n    const location = useLocation();\r\n    const { language } = location.state || {}; // Access the passed language from state\r\n    const [projects, setProjects] = useState([]); // State to hold the project names\r\n    const [loading, setLoading] = useState(false); // State for loading\r\n    const [error, setError] = useState(null); // State for error handling\r\n\r\n    useEffect(() => {\r\n        if (language) {\r\n            fetchProjects();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [language]);\r\n\r\n    // Function to fetch projects based on the selected language\r\n    const fetchProjects = async () => {\r\n        setLoading(true); // Set loading state to true\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            alert('Session expired. Please log in again.');\r\n            return;\r\n        }\r\n\r\n        setAuthHeader(token); // Set the authorization header\r\n\r\n        try {\r\n            console.log(\"Fetching projects for language:\", language);\r\n            const response = await request('GET', `/project?language=${language}`); // Make the API call\r\n            console.log(\"Response received:\", response); // Log the response\r\n            setProjects(response.data.projects || []); // Set the projects state\r\n        } catch (error) {\r\n            console.error('Error fetching projects:', error);\r\n            setError('Failed to fetch projects.'); // Set error message\r\n        } finally {\r\n            setLoading(false); // Reset loading state\r\n        }\r\n    };\r\n\r\n    const handleProjectSelection = (project) => {\r\n        console.log(`Selected project: ${project}`);\r\n        // Navigate to the project details or editing page here\r\n        // Example: navigate(`/project-details/${project}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"select-existing-project\">\r\n            <h2>Select Existing Project</h2>\r\n            {loading && <p className=\"loading\">Loading projects...</p>}\r\n            {error && <p className=\"error\">{error}</p>}\r\n            {language ? (\r\n                <div>\r\n                    <p>{language} Projects:</p>\r\n                    {projects.length > 0 ? (\r\n                        <div>\r\n                            {projects.map((project, index) => (\r\n                                <button key={index} className=\"project-button\">\r\n                                    {project}\r\n                                </button> // Render project names as buttons\r\n                            ))}\r\n                        </div>\r\n                    ) : (\r\n                        <p>No {language} projects found.</p>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <p>No language selected.</p>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default SelectExistingProject;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}